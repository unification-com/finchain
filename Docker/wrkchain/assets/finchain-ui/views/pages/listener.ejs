<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title><%= WRKCHAIN_NAME%> Stock Event Listener</title>

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.bundle.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.css">
    <link rel="stylesheet" href="css/style.css">
</head>
<body>

    <header>
      <!-- Fixed navbar -->
      <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <a class="navbar-brand" href="#"><%= WRKCHAIN_NAME%></a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
          <ul class="navbar-nav mr-auto">
            <li class="nav-item active"><a class="nav-link" href="/">Stock Watcher</a></li>
            <li class="nav-item"><a class="nav-link" href="/wrkoracle">WRKOracle Watcher</a></li>
            <li class="nav-item"><a class="nav-link" href="/validate"><%= WRKCHAIN_NAME%> Block Validation</a></li>
            <li class="nav-item"><a class="nav-link" href="<%= WRKCHAIN_EXPLORER_URL%>" target="_blank"><%= WRKCHAIN_NAME%> Block Explorer</a></li>
          </ul>
        </div>
      </nav>
    </header>

    <!-- Begin page content -->
    <main role="main" class="container">
        <br>
    <h1 class="mt-5">Stock Listener</h1>

    <div id="oracle_container">

        <p>Track:
            <select id="tracker_select">
            <% for(var i=0; i < TRACKED_TICKERS.length; i++) {%>
                <option value="<%= TRACKED_TICKERS[i] %>" <% if(TRACKED_TICKERS[i] == TICKER) { %>selected="selected" <% } %>>
                    <%= TRACKED_TICKERS[i] %>
                </option>
            <% } %>
            </select>

            Show trading hours:
                <select id="trading_select">
                    <option value="open"<% if (!locals.TRADING || TRADING =='open') { %>selected="selected" <% } %>>Open only</option>
                    <option value="closed"<% if (locals.TRADING && TRADING =='closed') { %>selected="selected" <% } %>>Open and Closed</option>
                </select>
        </p>


        <div>
            <h2>Latest Stocks Submitted<% if (locals.TICKER) { %>: <%= TICKER%> <% } %></h2>
            <table>
                <thead>
                <tr>
                    <th style="width: 70px;">Ticker</th>
                    <th style="width: 150px;">Price</th>
                    <th style="width: 200px;">Time</th>
                    <th style="width: 150px;">Oracle</th>
                    <th style="width: 70px;">Trading</th>
                </tr>
                </thead>
                <tbody id="stock_table">

                </tbody>
            </table>

            <% if (locals.TICKER) { %>
            <canvas id="stockChart" width="400" height="400"></canvas>
            <% } %>

        </div>

      <div>
            <h2>Discrepancies found</h2>
            <table>
                <thead>
                <tr>
                    <th style="width: 50px;">Ticker</th>
                    <th style="width: 150px;">Alpha Vantage</th>
                    <th style="width: 150px;">World Trading</th>
                    <th style="width: 150px;">IEX Cloud</th>
                    <th style="width: 170px;">Time</th>
                    <th style="width: 50px;">Threshold</th>
                    <th style="width: 70px;">Trading</th>
                </tr>
                </thead>
                <tbody id="disc_table">

                </tbody>
            </table>

        </div>
    </div>



    </main>

    <footer class="footer">
    <div class="container">
        <span class="text-muted"></span>
    </div>
    </footer>

<!-- jQuery library -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<!-- Popper JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>

<!-- Latest compiled JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>

<script type="text/javascript" src="js/web3.min.js"></script>
    <script type="text/javascript" src="js/FinchainDiscrepencyWatcher.proto.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js"></script>


<script type="text/javascript">

     $(document).ready(function () {

        let tm = <%= UPDATE_TIME%>;
        let tmObj = secondsToTime(tm)
        $('#next_check').text(tmObj.h + ":" + tmObj.m + ":" + tmObj.s)

        <% if (locals.TICKER) { %>
        let ticker = "<%= TICKER%>";
        <% } else { %>
        let ticker = null;
        <% } %>

        <% if (locals.TRADING) { %>
        let trading = "<%= TRADING%>";
        <% } else { %>
        let trading = "open";
        <% } %>

        let finchainDiscrepencyWatcher = new FinchainDiscrepencyWatcher('<%= FINCHAIN_ORACLE_CONTRACT_ADDRESS%>',
                                                                        '<%= WRKCHAIN_WEB3_PROVIDER_URL%>',
                                                                         <%- JSON.stringify(FINCHAIN_ORACLE_ABI)%>);
        updateWatcher();

        function updateWatcher() {
            $('#status').text("Fetching data");
            $('#next_check_secs').text(<%= UPDATE_TIME%>);
            finchainDiscrepencyWatcher.getLatestDiscrepencies(ticker, function(success, data) {
                if(success && data != undefined) {
                    $('#disc_table').html('');
                    for (i = 0; i < data.length; i++) {
                        let evnt = data[i];
                        let timestamp = evnt.returnValues._timestamp;

                        var display = false;
                        if(trading == 'closed') {
                            display = true;
                        } else {
                            if(isTradingHours(timestamp)) {
                                display = true;
                            }
                        }

                        if(display === true) {
                            let trHtml = '<tr>';
                            trHtml += '<td>' + evnt.returnValues._ticker + '</td>';
                            trHtml += '<td>$' + parseFloat(evnt.returnValues._price1) / 100 + '</td>';
                            trHtml += '<td>$' + parseFloat(evnt.returnValues._price2) / 100 + '</td>';
                            trHtml += '<td>$' + parseFloat(evnt.returnValues._price3) / 100 + '</td>';
                            trHtml += '<td>' + timeConverter(evnt.returnValues._timestamp) + '</td>';
                            trHtml += '<td>$' + parseFloat(evnt.returnValues._threshold) / 100 + '</td>';

                            if(isTradingHours(timestamp)) {
                                trHtml += '<td>Open</td>';
                            } else {
                                trHtml += '<td>Closed</td>';
                            }
                            trHtml += '</tr>';

                            $('#disc_table').append(trHtml);
                        }
                    }
                } else {
                    console.log(data);
                    $('#status').text("Please refresh to try again");
                }
            });

            finchainDiscrepencyWatcher.getLatestStocks(ticker, function(success, data) {
                if(success && data != undefined) {
                    $('#stock_table').html('');
                    for (i = 0; i < data.length; i++) {
                        let evnt = data[i];
                        let timestamp = evnt.returnValues._timestamp;

                        var display = false;
                        if(trading == 'closed') {
                            display = true;
                        } else {
                            if(isTradingHours(timestamp)) {
                                display = true;
                            }
                        }

                        if(display === true) {
                            let trHtml = '<tr>';
                            trHtml += '<td>' + evnt.returnValues._ticker + '</td>';
                            trHtml += '<td>$' + parseFloat(evnt.returnValues._price) / 100 + '</td>';
                            trHtml += '<td>' + timeConverter(evnt.returnValues._timestamp) + '</td>';
                            trHtml += '<td>' + evnt.returnValues._source + '</td>';

                            if(isTradingHours(timestamp)) {
                                trHtml += '<td>Open</td>';
                            } else {
                                trHtml += '<td>Closed</td>';
                            }

                            trHtml += '</tr>';

                            $('#stock_table').append(trHtml);
                        }
                    }
                    if(ticker !== null) {
                        drawChart(data);
                    }
                } else {
                    console.log(data);
                    $('#status').text("Please refresh to try again");
                }
            });

        }

        function timeConverter(UNIX_timestamp, groupByHour=false){
            //hack to get NYC time, GMT-4
            UNIX_timestamp = parseInt(UNIX_timestamp) - 14400;
            var a = new Date(UNIX_timestamp * 1000);
            var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
            var year = a.getFullYear();
            var month = months[a.getMonth()];
            var date = a.getDate();
            var hour = "0" + a.getHours();
            var min = "0" + a.getMinutes();
            var sec = "0" + a.getSeconds();

            if(groupByHour == true) {
                var time = date + ' ' + month + ' ' + year + ' ' + hour.substr(-2) + ':00 - ' + hour.substr(-2) + ':59' ;
            } else {
                var time = date + ' ' + month + ' ' + year + ' ' + hour.substr(-2) + ':' + min.substr(-2) + ':' + sec.substr(-2) ;
            }
            return time;
        }

        function isTradingHours(UNIX_timestamp) {
            var a = new Date(UNIX_timestamp * 1000);
            var hour = a.getHours();
            // NYSE trading times (09:30 - 16:00 = 13:30 - 20:00 GMT)
            if(hour >= 13 && hour <= 20) {
                return true;
            }
            return false;
        }

        function secondsToTime(secs) {
            secs = Math.round(secs);
            var hours = Math.floor(secs / (60 * 60));

            var divisor_for_minutes = secs % (60 * 60);
            var minutes = Math.floor(divisor_for_minutes / 60);

            var divisor_for_seconds = divisor_for_minutes % 60;
            var seconds = divisor_for_seconds;

            var obj = {
                "h": hours,
                "m": minutes,
                "s": seconds
            };
            return obj;
        }

        $('#tracker_select').change(function(){
            let ticker = $("#tracker_select option:selected").val();
            let trading = $("#trading_select option:selected").val();
            if(ticker == "all") {
                window.location = window.location.protocol + "//" + window.location.hostname + ":" + window.location.port + "/?trading=" + trading;
            } else {
                window.location = window.location.protocol + "//" + window.location.hostname + ":" + window.location.port + "/?ticker=" + ticker + "&trading=" + trading;
            }
        });

        $('#trading_select').change(function(){
            let ticker = $("#tracker_select option:selected").val();
            let trading = $("#trading_select option:selected").val();
            if(ticker == "all") {
                window.location = window.location.protocol + "//" + window.location.hostname + ":" + window.location.port + "/?trading=" + trading;
            } else {
                window.location = window.location.protocol + "//" + window.location.hostname + ":" + window.location.port + "/?ticker=" + ticker + "&trading=" + trading;
            }
        });




        function drawChart(data) {

            let colours = {
                'Alpha Vantage': {
                    'backgroundColor': 'rgba(255, 99, 132, 0.1)',
                    'borderColor': 'rgba(255, 99, 132, 1)',
                },
                'World Trading': {
                    'backgroundColor': 'rgba(54, 162, 235, 0.1)',
                    'borderColor': 'rgba(54, 162, 235, 1)',
                },
                'IEX Cloud': {
                    'backgroundColor': 'rgba(75, 192, 192, 0.1)',
                    'borderColor': 'rgba(75, 192, 192, 1)',
                }
            }
            let minPrice = 100000000.0;
            let maxPrice = 0.0;

            data = data.reverse();
            var ctx = document.getElementById('stockChart').getContext('2d');

            let dataSets = [];
            let labels = [];
            let dataByDate = {};

            //calculate averages for missing data...
            let averages = {'Alpha Vantage':{avg:0,cnt:0,tot:0},'World Trading':{avg:0,cnt:0,tot:0}, 'IEX Cloud':{avg:0,cnt:0,tot:0}};

            for (i = 0; i < data.length; i++) {
                let evnt = data[i];
                let price = parseFloat(evnt.returnValues._price) / 100;
                let source = evnt.returnValues._source;
                let timestamp = evnt.returnValues._timestamp;
                var display = false;
                if(trading == 'closed') {
                    display = true;
                } else {
                    if(isTradingHours(timestamp)) {
                        display = true;
                    }
                }

                if(price > 0 && display === true) {
                    averages[source].cnt++;
                    averages[source].tot += price;
                    if(price < minPrice) {
                        minPrice = price;
                    }
                    if(price > maxPrice) {
                        maxPrice = price;
                    }
                }
            }

            averages['Alpha Vantage'].avg = (averages['Alpha Vantage'].tot / averages['Alpha Vantage'].cnt).toFixed(2);
            averages['World Trading'].avg = (averages['World Trading'].tot / averages['World Trading'].cnt).toFixed(2);
            averages['IEX Cloud'].avg = (averages['IEX Cloud'].tot / averages['IEX Cloud'].cnt).toFixed(2);

            // last submitted value - begin with avg
            averages['Alpha Vantage'].last = averages['Alpha Vantage'].avg;
            averages['World Trading'].last = averages['World Trading'].avg;
            averages['IEX Cloud'].last = averages['IEX Cloud'].avg;


            for (i = 0; i < data.length; i++) {
                let evnt = data[i];
                let price = parseFloat(evnt.returnValues._price) / 100;
                let dateTime = timeConverter(evnt.returnValues._timestamp, true);
                let source = evnt.returnValues._source;
                let timestamp = evnt.returnValues._timestamp;
                var display = false;
                if(trading == 'closed') {
                    display = true;
                } else {
                    if(isTradingHours(timestamp)) {
                        display = true;
                    }
                }
                if(!labels.includes(dateTime) && display === true) {
                    labels.push(dateTime);
                    // initialise with last submitted value to fill missing data
                    dataByDate[dateTime] = {'Alpha Vantage':parseFloat(averages['Alpha Vantage'].last),
                                            'World Trading':parseFloat(averages['World Trading'].last),
                                            'IEX Cloud':parseFloat(averages['IEX Cloud'].last)};
                }
                if(price > 0 && display === true) {
                    dataByDate[dateTime][source] = price;

                    //update last submitted value
                    averages[source].last = price;
                }
            }

            let diffPrice = maxPrice - minPrice;
            let dataKeys = Object.keys(averages); //use this to get sources

            for(let k of dataKeys) {
                let d = [];
                for(let dateKey of Object.keys(dataByDate)) {
                    d.push(dataByDate[dateKey][k]);
                }
                let chartData = {};
                chartData['label'] = k;
                chartData['data'] = d;
                chartData['backgroundColor'] = [colours[k].backgroundColor]
                chartData['borderColor'] = [colours[k].borderColor]
                dataSets.push(chartData);
            }

            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: dataSets
                 },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                suggestedMin: (minPrice - (diffPrice / 5)),
                                suggestedMax: (maxPrice + (diffPrice / 5)),
                                callback: function(value, index, values) {
                                    return '$' + value;
                                }
                            }
                        }],
                        xAxes: [{
                            ticks: {
                                callback: function(value, index, values) {
                                    if(trading == 'closed') {
                                        let dateArray = value.split(" ");
                                        let hour = parseInt(dateArray[3]);
                                        if(hour >= 9 && hour <= 16) {
                                            return value + ' (open)';
                                        } else {
                                            return value + ' (closed)';
                                        }
                                    } else {
                                        return value;
                                    }

                                }
                            }
                        }]
                    }
                }
            });
        }
    });
</script>
</body>
</html>
